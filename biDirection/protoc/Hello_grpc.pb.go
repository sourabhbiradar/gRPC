// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: Hello.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BiDir_ServerReply_FullMethodName = "/BiDir/ServerReply"
)

// BiDirClient is the client API for BiDir service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BiDirClient interface {
	ServerReply(ctx context.Context, opts ...grpc.CallOption) (BiDir_ServerReplyClient, error)
}

type biDirClient struct {
	cc grpc.ClientConnInterface
}

func NewBiDirClient(cc grpc.ClientConnInterface) BiDirClient {
	return &biDirClient{cc}
}

func (c *biDirClient) ServerReply(ctx context.Context, opts ...grpc.CallOption) (BiDir_ServerReplyClient, error) {
	stream, err := c.cc.NewStream(ctx, &BiDir_ServiceDesc.Streams[0], BiDir_ServerReply_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &biDirServerReplyClient{stream}
	return x, nil
}

type BiDir_ServerReplyClient interface {
	Send(*CReq) error
	Recv() (*SResp, error)
	grpc.ClientStream
}

type biDirServerReplyClient struct {
	grpc.ClientStream
}

func (x *biDirServerReplyClient) Send(m *CReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *biDirServerReplyClient) Recv() (*SResp, error) {
	m := new(SResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BiDirServer is the server API for BiDir service.
// All implementations must embed UnimplementedBiDirServer
// for forward compatibility
type BiDirServer interface {
	ServerReply(BiDir_ServerReplyServer) error
	mustEmbedUnimplementedBiDirServer()
}

// UnimplementedBiDirServer must be embedded to have forward compatible implementations.
type UnimplementedBiDirServer struct {
}

func (UnimplementedBiDirServer) ServerReply(BiDir_ServerReplyServer) error {
	return status.Errorf(codes.Unimplemented, "method ServerReply not implemented")
}
func (UnimplementedBiDirServer) mustEmbedUnimplementedBiDirServer() {}

// UnsafeBiDirServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BiDirServer will
// result in compilation errors.
type UnsafeBiDirServer interface {
	mustEmbedUnimplementedBiDirServer()
}

func RegisterBiDirServer(s grpc.ServiceRegistrar, srv BiDirServer) {
	s.RegisterService(&BiDir_ServiceDesc, srv)
}

func _BiDir_ServerReply_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BiDirServer).ServerReply(&biDirServerReplyServer{stream})
}

type BiDir_ServerReplyServer interface {
	Send(*SResp) error
	Recv() (*CReq, error)
	grpc.ServerStream
}

type biDirServerReplyServer struct {
	grpc.ServerStream
}

func (x *biDirServerReplyServer) Send(m *SResp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *biDirServerReplyServer) Recv() (*CReq, error) {
	m := new(CReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BiDir_ServiceDesc is the grpc.ServiceDesc for BiDir service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BiDir_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "BiDir",
	HandlerType: (*BiDirServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ServerReply",
			Handler:       _BiDir_ServerReply_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "Hello.proto",
}
