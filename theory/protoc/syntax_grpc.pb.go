// protobuf file wil be in proto dir
// cmd : protoc --go-grpc_out=. --go_out=. *.proto
// auto generates stubs : file_grpc.pb.go & file.pb.go

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: syntax.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Expl_SReply_FullMethodName  = "/Expl/SReply"
	Expl_SReply2_FullMethodName = "/Expl/SReply2"
)

// ExplClient is the client API for Expl service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExplClient interface {
	SReply(ctx context.Context, in *CReqt, opts ...grpc.CallOption) (*SResp, error)
	SReply2(ctx context.Context, in *CReqt, opts ...grpc.CallOption) (*CReqt, error)
}

type explClient struct {
	cc grpc.ClientConnInterface
}

func NewExplClient(cc grpc.ClientConnInterface) ExplClient {
	return &explClient{cc}
}

func (c *explClient) SReply(ctx context.Context, in *CReqt, opts ...grpc.CallOption) (*SResp, error) {
	out := new(SResp)
	err := c.cc.Invoke(ctx, Expl_SReply_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *explClient) SReply2(ctx context.Context, in *CReqt, opts ...grpc.CallOption) (*CReqt, error) {
	out := new(CReqt)
	err := c.cc.Invoke(ctx, Expl_SReply2_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExplServer is the server API for Expl service.
// All implementations must embed UnimplementedExplServer
// for forward compatibility
type ExplServer interface {
	SReply(context.Context, *CReqt) (*SResp, error)
	SReply2(context.Context, *CReqt) (*CReqt, error)
	mustEmbedUnimplementedExplServer()
}

// UnimplementedExplServer must be embedded to have forward compatible implementations.
type UnimplementedExplServer struct {
}

func (UnimplementedExplServer) SReply(context.Context, *CReqt) (*SResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SReply not implemented")
}
func (UnimplementedExplServer) SReply2(context.Context, *CReqt) (*CReqt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SReply2 not implemented")
}
func (UnimplementedExplServer) mustEmbedUnimplementedExplServer() {}

// UnsafeExplServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExplServer will
// result in compilation errors.
type UnsafeExplServer interface {
	mustEmbedUnimplementedExplServer()
}

func RegisterExplServer(s grpc.ServiceRegistrar, srv ExplServer) {
	s.RegisterService(&Expl_ServiceDesc, srv)
}

func _Expl_SReply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CReqt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExplServer).SReply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Expl_SReply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExplServer).SReply(ctx, req.(*CReqt))
	}
	return interceptor(ctx, in, info, handler)
}

func _Expl_SReply2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CReqt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExplServer).SReply2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Expl_SReply2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExplServer).SReply2(ctx, req.(*CReqt))
	}
	return interceptor(ctx, in, info, handler)
}

// Expl_ServiceDesc is the grpc.ServiceDesc for Expl service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Expl_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Expl",
	HandlerType: (*ExplServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SReply",
			Handler:    _Expl_SReply_Handler,
		},
		{
			MethodName: "SReply2",
			Handler:    _Expl_SReply2_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "syntax.proto",
}
